// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Viverov/guideliner/internal/domains/guide/repository (interfaces: GuideRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/Viverov/guideliner/internal/domains/guide/entity"
	repository "github.com/Viverov/guideliner/internal/domains/guide/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockGuideRepository is a mock of GuideRepository interface.
type MockGuideRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGuideRepositoryMockRecorder
}

// MockGuideRepositoryMockRecorder is the mock recorder for MockGuideRepository.
type MockGuideRepositoryMockRecorder struct {
	mock *MockGuideRepository
}

// NewMockGuideRepository creates a new mock instance.
func NewMockGuideRepository(ctrl *gomock.Controller) *MockGuideRepository {
	mock := &MockGuideRepository{ctrl: ctrl}
	mock.recorder = &MockGuideRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuideRepository) EXPECT() *MockGuideRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockGuideRepository) Count(arg0 repository.CountConditions) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockGuideRepositoryMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGuideRepository)(nil).Count), arg0)
}

// Find mocks base method.
func (m *MockGuideRepository) Find(arg0 repository.FindConditions) ([]entity.Guide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]entity.Guide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGuideRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGuideRepository)(nil).Find), arg0)
}

// FindById mocks base method.
func (m *MockGuideRepository) FindById(arg0 uint) (entity.Guide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(entity.Guide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockGuideRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockGuideRepository)(nil).FindById), arg0)
}

// Insert mocks base method.
func (m *MockGuideRepository) Insert(arg0 entity.Guide) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockGuideRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGuideRepository)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockGuideRepository) Update(arg0 entity.Guide) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGuideRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGuideRepository)(nil).Update), arg0)
}
